version: '3.8'
name: microservices
services:
  hotels:
    restart: always
    build:
      context: ./hotels
    deploy:
      replicas: 2
    expose:
      - "8080"
    depends_on:
      - mongodb
      - solr
      - queue
    volumes:
      - hotels_go_modules:/go/pkg/mod
      - public:/api/static
    networks:
      - app-network

  search:
    restart: always
    build:
      context: ./search
    deploy:
      replicas: 2
    expose:
      - "8080"
    depends_on:
      - queue
    volumes:
      - search_go_modules:/go/pkg/mod
    networks:
      - app-network

  business:
    restart: always
    build:
      context: ./business
    deploy:
      replicas: 2
    expose:
      - "8080"
    depends_on:
      - db_business
      - memcached
    volumes:
      - business_go_modules:/go/pkg/mod
    environment:
      - MYSQL_DB_NAME=db_business
      - MYSQL_DB_USER=root
      - MYSQL_DB_PASS=root
      - MYSQL_DB_HOST=db_business
      - MYSQL_DB_PORT=3306
      - AMADEUS_API_KEY=GTGaWwpNKsUwpQG4v4Q9PVZr3n69PCio
      - AMADEUS_API_SECRET=8ynGLNxs9Gl63GYQ
      - QUERY_KEY=Edsf489545
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
    deploy:
      replicas: 2
    expose:
      - "3000"
    volumes:
      - frontend_node_modules:/app/node_modules
    networks:
      - app-network

  db_business:
    image: mysql
    container_name: db_business
    restart: always
    environment:
      MYSQL_DATABASE: db_business
      MYSQL_ROOT_PASSWORD: root
    ports:
      - 3307:3306
    volumes:
      - dbdata:/var/lib/mysql
    networks:
      - app-network

  mongodb:
    image: mongo:5.0
    container_name: mongodb
    restart: always
    ports:
      - 27018:27017
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=root
    volumes:
      - mongodata:/data/db
    networks:
      - app-network

  memcached:
    image: memcached:1.6.16
    container_name: memcached
    restart: always
    ports: 
      - 11211:11211
    networks:
      - app-network 
    
  queue:
    image: rabbitmq:3-management
    container_name: queue
    restart: always
    ports:
      - "5671:5671"
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=password
    networks:
      - app-network

  solr:
    image: solr
    container_name: solr
    restart: always
    ports: 
      - 8983:8983
    entrypoint:
      - bash
      - "-c"
      - "mkdir /var/solr/data; precreate-core hotels; precreate-core hotels_test; exec solr -f"
    volumes:
      - solrdata:/var/solr
    networks:
      - app-network

  nginx_frontend:
    image: nginx:latest
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
    ports:
      - "81:80"
    networks:
      - app-network

  nginx_hotels:
    image: nginx:latest
    volumes:
      - ./hotels/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - hotels
    ports:
      - "82:80"
    networks:
      - app-network

  nginx_search:
    image: nginx:latest
    volumes:
      - ./search/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - search
    ports:
      - "83:80"
    networks:
      - app-network

  nginx_business:
    image: nginx:latest
    volumes:
      - ./business/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - business
    ports:
      - "84:80"
    networks:
      - app-network


networks:
  app-network:
    driver: bridge

volumes:
  dbdata:
  mongodata:
  hotels_go_modules:
  search_go_modules:
  business_go_modules:
  frontend_node_modules:
  solrdata:
  public:
